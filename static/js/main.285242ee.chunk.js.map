{"version":3,"sources":["ThreeSphereAnimation/threeInit.js","ThreeSphereAnimation/mesh.js","ThreeSphereAnimation/NormalMap.png","ThreeSphereAnimation/texture.js","ThreeSphereAnimation/lights.js","ThreeSphereAnimation/Origami.mp3","ThreeSphereAnimation/animations.js","ThreeSphereAnimation/index.js","ThreeSphereAnimation/threeGUI.js","ThreeSphereAnimation/audio.js","App.js","index.js"],"names":["scene","THREE","window","innerWidth","innerHeight","camera","position","set","sphere","renderer","alpha","updateScene","aspect","updateProjectionMatrix","setSize","setPixelRatio","Math","min","devicePixelRatio","initMesh","map","normalMap","NormalMap","load","sphereGeometry","sphereMaterial","color","metalness","roughness","add","pointLight1","pointLight2","spherePosition","e","sizeX","sizeY","x","clientX","y","clientY","ThreeSphereAnimation","useEffect","canvas","document","querySelector","render","appendChild","domElement","initScene","gui","dat","addFolder","initGUI","listener","sound","Music","buffer","setBuffer","setLoop","setVolume","offset","audioInit","clock","tick","elapsedTime","getElapsedTime","rotation","requestAnimationFrame","sphereRotation","addEventListener","location","reload","className","id","App","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.285242ee.chunk.js","sourcesContent":["import * as THREE from 'three';\n\nexport const scene = new THREE.Scene();\nlet { innerWidth, innerHeight } = window;\n\nexport const camera = new THREE.PerspectiveCamera(\n  65,\n  innerWidth / innerHeight,\n  0.1,\n  1000\n);\n\ncamera.position.set(0, 0, 2);\n\nexport const renderer = new THREE.WebGLRenderer({ alpha: true });\n\nexport const initScene = () => {\n  let canvas = document.querySelector('.webgl');\n\n  let { innerWidth, innerHeight } = window;\n  renderer.setSize(innerWidth, innerHeight);\n  renderer.render(scene, camera);\n\n  canvas.appendChild(renderer.domElement);\n};\n\nexport const updateScene = () => {\n  let { innerWidth, innerHeight } = window;\n\n  camera.aspect = innerWidth / innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(innerWidth, innerHeight);\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n}","import * as THREE from 'three';\nimport { getTexture } from './texture';\nimport NormalMap from './NormalMap.png';\n\nimport { scene } from './threeInit';\n\nexport let sphere;\nexport const initMesh = () => {\n  const normalMap = getTexture(NormalMap);\n  const sphereGeometry = new THREE.SphereGeometry(0.5, 64, 64);\n  const sphereMaterial = new THREE.MeshStandardMaterial({\n    color: 0x292929,\n    metalness: 0.7,\n    roughness: 0.7,\n    normalMap,\n  });\n  sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n  scene.add(sphere);\n};\n","export default __webpack_public_path__ + \"static/media/NormalMap.0349aa08.png\";","import * as THREE from 'three';\n\nexport const getTexture = (map) => {\n  const textureLoader = new THREE.TextureLoader();\n  return textureLoader.load(map);\n};\n","import * as THREE from 'three';\n\nimport { scene } from './threeInit';\n\nexport const pointLight1 = new THREE.PointLight(0x0000ff, 1.2);\npointLight1.position.set(3, -1, -0.4);\n\n\nexport const pointLightHelper = new THREE.PointLightHelper(pointLight1, 0.2);\n\n\nexport const pointLight2 = new THREE.PointLight(0xff0000, 1.2);\npointLight2.position.set(-3, 1, -1.28);\n\n\nexport const pointLightHelper2 = new THREE.PointLightHelper(pointLight2, 0.2);\n\nexport const initLights = () => {\n  scene.add(pointLight1);\n  scene.add(pointLight2);\n};\n","export default __webpack_public_path__ + \"static/media/Origami.748a76bc.mp3\";","import * as THREE from 'three';\nimport { sphere } from './mesh';\nimport { renderer, scene, camera } from './threeInit';\n\nexport const sphereRotation = () => {\n  const clock = new THREE.Clock();\n  const tick = () => {\n    const elapsedTime = clock.getElapsedTime();\n    sphere.rotation.y = 0.5 * elapsedTime;\n    renderer.render(scene, camera);\n    requestAnimationFrame(tick);\n  };\n  tick();\n};\n\nexport const spherePosition = (e) => {\n  let sizeX = window.innerWidth / 2;\n  let sizeY = window.innerHeight / 2;\n  let x = e.clientX;\n  let y = e.clientY;\n\n  sphere.position.x = (sizeX - x) * 0.001;\n  sphere.position.y = (y - sizeY) * 0.001;\n}","import React, { useEffect } from 'react';\nimport { initScene, updateScene } from './threeInit';\nimport { initMesh } from './mesh';\nimport { initLights } from './lights';\nimport { initGUI } from './threeGUI';\nimport { audioInit } from './audio';\nimport { sphereRotation, spherePosition } from './animations';\n\nconst ThreeSphereAnimation = () => {\n  useEffect(() => {\n    initScene();\n    initMesh();\n    initLights();\n    initGUI();\n    audioInit();\n    sphereRotation();\n\n    let canvas = document.querySelector('.webgl');\n\n    canvas.addEventListener('mousemove', spherePosition);\n\n    window.addEventListener('resize', updateScene);\n    return () => {\n      window.location.reload();\n    };\n  }, []);\n  return (\n    <>\n      <div className=\"text\">\n        <h1>Feel the sphere</h1>\n      </div>\n      <div className=\"webgl\" id=\"webgl\"></div>\n      <section className=\"section\"></section>\n    </>\n  );\n}\n\nexport default ThreeSphereAnimation;\n","import * as dat from 'dat.gui';\n\nimport { scene } from './threeInit';\n\nimport {\n  pointLight1,\n  pointLight2,\n  pointLightHelper,\n  pointLightHelper2,\n} from './lights';\n\nexport const initGUI = () => {\n  const gui = new dat.GUI();\n\n  gui.addFolder('camera1');\n  gui.add(pointLight1.position, 'x', -3, 3, 0.2);\n  gui.add(pointLight1.position, 'y', -3, 3, 0.2);\n  gui.add(pointLight1.position, 'z', -3, 3, 0.2);\n  gui.add(pointLight1, 'intensity', -1, 2, 0.1);\n\n  gui.addFolder('camera2');\n  gui.add(pointLight2.position, 'x', -3, 3, 0.2);\n  gui.add(pointLight2.position, 'y', -3, 3, 0.2);\n  gui.add(pointLight2.position, 'z', -3, 3, 0.2);\n  gui.add(pointLight2, 'intensity', -1, 2, 0.1);\n\n  // scene.add(pointLightHelper);\n  // scene.add(pointLightHelper2);\n};\n","import * as THREE from 'three';\nimport { camera } from './threeInit';\nimport Music from './Origami.mp3';\n\nexport const audioInit = () => {\n  const listener = new THREE.AudioListener();\n  camera.add(listener);\n  \n  const sound = new THREE.Audio(listener);\n  \n  const audioLoader = new THREE.AudioLoader();\n  audioLoader.load(Music, (buffer) => {\n    sound.setBuffer(buffer);\n    sound.setLoop(true);\n    sound.setVolume(0.2);\n    sound.offset = 10;\n    // sound.play();\n  });\n  \n}\n\n","import React from 'react';\nimport ThreeSphereAnimation from './ThreeSphereAnimation/index';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <ThreeSphereAnimation />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}